datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id                     String         @id @map("id")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @default(now()) @updatedAt @map("updated_at")
  name                   String?        @map("name")
  username               String         @unique @map("username")
  role                   UserRole       @default(USER)
  email                  String?        @unique @map("email")
  tokens                 Token[]        @relation("user_tokens")
  sessions               Session[]      @relation("user_sessions")
  biography              String         @default("") @map("biography")
  siteURL                String?        @map("site_url")
  followees              Friendship[]   @relation("user_followers")
  followeesCount         Int            @default(0) @map("followees_count")
  followers              Friendship[]   @relation("user_followees")
  followersCount         Int            @default(0) @map("followers_count")
  bookmarks              Bookmark[]     @relation("user_bookmarks")
  headerFileId           String?        @map("header_file_id")
  iconFileId             String?        @map("icon_file_id")
  likes                  Like[]         @relation("user_likes")
  notifications          Notification[] @relation("user_notifications")
  posts                  Post[]         @relation("user_posts")
  references             Reference[]    @relation("user_references")
  reactions              Reaction[]     @relation("user_reactions")
  loginProvider          LoginProvider  @map("login_provider")
  fcmToken               String?        @map("fcm_token")
  fcmTokenForMobile      String?        @map("fcm_token_for_mobile")
  notificationEmail      String?        @map("notification_email")
  protected              Boolean        @default(false) @map("protected")
  discoverableByEmail    Boolean        @default(true) @map("discoverable_by_email")
  subscribeMessage       Boolean        @default(false) @map("subscribe_message")
  subscribePostLike      Boolean        @default(false) @map("subscribe_post_like")
  subscribePostQuotation Boolean        @default(false) @map("subscribe_post_quotation")

  @@index([createdAt])
  @@map("users")
}

model Friendship {
  id            String         @id @map("id")
  createdAt     DateTime       @default(now()) @map("created_at")
  followee      User           @relation("user_followees", fields: [followeeId], references: [id])
  followeeId    String         @map("followee_id")
  follower      User           @relation("user_followers", fields: [followerId], references: [id])
  followerId    String         @map("follower_id")
  notifications Notification[] @relation("notifications_friendship")

  @@unique([followerId, followeeId])
  @@index([followerId, createdAt])
  @@map("friendships")
}

model Session {
  id                 String    @id @default(cuid()) @map("id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")
  antiCSRFToken      String?   @map("anti_csrf_token")
  expiresAt          DateTime? @map("expires_at")
  handle             String    @unique @map("handle")
  hashedSessionToken String?   @map("hashed_session_token")
  privateData        String?   @map("private_data")
  publicData         String?   @map("public_data")
  user               User?     @relation("user_sessions", fields: [userId], references: [id])
  userId             String?   @map("user_id")

  @@map("sessions")
}

model Post {
  id              String         @id @map("id")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
  dateText        String         @map("date_text")
  bookmarks       Bookmark[]     @relation("post_bookmarks")
  fileIds         String[]       @map("file_ids")
  likes           Like[]         @relation("post_likes")
  likesCount      Int            @default(0) @map("likes_count")
  reactions       Reaction[]     @relation("post_reactions")
  notifications   Notification[] @relation("notifications_post")
  quotation       Post?          @relation("post_quotations", fields: [quotationId], references: [id])
  quotationId     String?        @map("quotation_id")
  quotations      Post[]         @relation("post_quotations")
  quotationsCount Int            @default(0) @map("quotations_count")
  references      Reference[]    @relation("post_references")
  replies         Post[]         @relation("post_replies")
  repliesCount    Int            @default(0) @map("replies_count")
  reply           Post?          @relation("post_replies", fields: [replyId], references: [id])
  replyId         String?        @map("reply_id")
  text            String?        @map("text")
  user            User?          @relation("user_posts", fields: [userId], references: [id])
  userId          String?        @map("user_id")
  isDeleted       Boolean?       @default(false) @map("is_deleted")

  @@unique([userId, quotationId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([replyId, createdAt])
  @@map("posts")
}

model Reference {
  createdAt DateTime @default(now()) @map("created_at")
  isRead    Boolean  @default(false) @map("is_read")
  post      Post     @relation("post_references", fields: [postId], references: [id])
  postId    String   @map("post_id")
  user      User     @relation("user_references", fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@id([userId, postId])
  @@index([userId, createdAt])
  @@map("references")
}

model Like {
  id            String         @id @map("id")
  createdAt     DateTime       @default(now()) @map("created_at")
  notifications Notification[] @relation("notifications_like")
  post          Post           @relation("post_likes", fields: [postId], references: [id])
  postId        String         @map("post_id")
  user          User           @relation("user_likes", fields: [userId], references: [id])
  userId        String         @map("user_id")

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@map("likes")
}

model Reaction {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  text      String   @map("text")
  post      Post     @relation("post_reactions", fields: [postId], references: [id])
  postId    String   @map("post_id")
  users     User[]   @relation("user_reactions")
  count     Int      @default(0) @map("count")

  @@unique([postId, text])
  @@index([postId])
  @@map("reactions")
}

model Bookmark {
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation("post_bookmarks", fields: [postId], references: [id])
  postId    String   @map("post_id")
  user      User     @relation("user_bookmarks", fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@map("bookmarks")
}

model Notification {
  id           String           @id @map("id")
  type         NotificationType @map("type")
  uniqueId     String           @map("unique_id")
  createdAt    DateTime         @default(now()) @map("created_at")
  friendship   Friendship?      @relation("notifications_friendship", fields: [friendshipId], references: [id])
  friendshipId String?          @map("friendship_id")
  isRead       Boolean          @default(false) @map("is_read")
  like         Like?            @relation("notifications_like", fields: [likeId], references: [id])
  likeId       String?          @map("like_id")
  post         Post?            @relation("notifications_post", fields: [postId], references: [id])
  postId       String?          @map("post_id")
  user         User?            @relation("user_notifications", fields: [userId], references: [id])
  userId       String?          @map("user_id")

  @@unique([userId, type, uniqueId])
  @@index([userId, createdAt])
  @@map("notifications")
}

model Token {
  id          String    @id @map("id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  hashedToken String    @map("hashed_token")
  type        TokenType @map("type")
  expiresAt   DateTime  @map("expires_at")
  sentTo      String    @map("sent_to")
  user        User      @relation("user_tokens", fields: [userId], references: [id])
  userId      String    @map("user_id")

  @@unique([hashedToken, type])
  @@map("tokens")
}

enum TokenType {
  RESET_PASSWORD
}

enum NotificationType {
  FOLLOW
  FRIENDSHIP
  LIKE
  REPLY
  QUOTATION

  @@map("notification_type")
}

enum UserRole {
  ADMIN
  SYSTEM
  USER

  @@map("user_role")
}

enum LoginProvider {
  GOOGLE_COM
  PASSWORD

  @@map("login_provider")
}
